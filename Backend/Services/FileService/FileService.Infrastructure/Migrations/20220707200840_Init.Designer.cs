// <auto-generated />
using System;
using FileService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileService.Infrastructure.Migrations
{
    [DbContext(typeof(FileContext))]
    [Migration("20220707200840_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.AssetFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ExternalEntityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("external_entity_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("asset", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("AssetFile");
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.Avatar.AvatarAsset", b =>
                {
                    b.HasBaseType("FileService.Core.Domain.Aggregates.AssetFile");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_url");

                    b.HasDiscriminator().HasValue("AvatarAsset");
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.Image.ImageAsset", b =>
                {
                    b.HasBaseType("FileService.Core.Domain.Aggregates.AssetFile");

                    b.Property<string>("Description")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Tags")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasDiscriminator().HasValue("ImageAsset");
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.Tenant.TenantImageAsset", b =>
                {
                    b.HasBaseType("FileService.Core.Domain.Aggregates.AssetFile");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_image_url");

                    b.HasDiscriminator().HasValue("TenantImageAsset");
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.Tenant.TenantVideoAsset", b =>
                {
                    b.HasBaseType("FileService.Core.Domain.Aggregates.AssetFile");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tenant_video_url");

                    b.HasDiscriminator().HasValue("TenantVideoAsset");
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.Video.VideoAsset", b =>
                {
                    b.HasBaseType("FileService.Core.Domain.Aggregates.AssetFile");

                    b.Property<string>("Description")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Tags")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasDiscriminator().HasValue("VideoAsset");
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.AssetFile", b =>
                {
                    b.OwnsOne("FileService.Core.Domain.AssetType", "AssetType", b1 =>
                        {
                            b1.Property<Guid>("AssetFileId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("asset_type_description");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("asset_type_value");

                            b1.HasKey("AssetFileId");

                            b1.ToTable("asset");

                            b1.WithOwner()
                                .HasForeignKey("AssetFileId");
                        });

                    b.Navigation("AssetType")
                        .IsRequired();
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.Image.ImageAsset", b =>
                {
                    b.OwnsMany("FileService.Core.Domain.ValueObjects.ImageUrl", "Images", b1 =>
                        {
                            b1.Property<Guid>("ImageAssetId")
                                .HasColumnType("char(36)")
                                .HasColumnName("image_file_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<int>("Breakpoint")
                                .HasColumnType("int")
                                .HasColumnName("breakpoint");

                            b1.Property<string>("Format")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("image_format");

                            b1.Property<int>("Height")
                                .HasColumnType("int")
                                .HasColumnName("height");

                            b1.Property<long>("Size")
                                .HasColumnType("bigint")
                                .HasColumnName("size");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("image_url");

                            b1.Property<int>("Width")
                                .HasColumnType("int")
                                .HasColumnName("width");

                            b1.HasKey("ImageAssetId", "Id");

                            b1.ToTable("asset_image_urls", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ImageAssetId");
                        });

                    b.Navigation("Images");
                });

            modelBuilder.Entity("FileService.Core.Domain.Aggregates.Video.VideoAsset", b =>
                {
                    b.OwnsOne("FileService.Core.Domain.ValueObjects.VideoUrl", "Video", b1 =>
                        {
                            b1.Property<Guid>("VideoAssetId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Duration")
                                .HasColumnType("double")
                                .HasColumnName("video_duration");

                            b1.Property<string>("Format")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("video_format");

                            b1.Property<int>("Height")
                                .HasColumnType("int")
                                .HasColumnName("video_height");

                            b1.Property<long>("Size")
                                .HasColumnType("bigint")
                                .HasColumnName("video_size");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("video_url");

                            b1.Property<int>("Width")
                                .HasColumnType("int")
                                .HasColumnName("video_width");

                            b1.HasKey("VideoAssetId");

                            b1.ToTable("asset");

                            b1.WithOwner()
                                .HasForeignKey("VideoAssetId");
                        });

                    b.Navigation("Video")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
